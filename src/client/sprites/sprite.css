/**
 * Use the `sprite` class togheter with the class for Sprite eg. "sprite robot" for the robot sprite.
 * Position the sprite using the css variables --y and --x
 *
 * The direction of the prite can also be changed using the classes up, down, left, right
 *
 *
 * To add a new sprite create an class and set the background image
 * and the `--frames` variable to the numbers of frames in an animation.
 * you will also need to set the --sprite-width and --sprite-height variable
 * if it is not the default size.
 */

.sprite.robot {
    background-image: url("robot.png");
    --frames: 3;
}

.sprite.fireball {
    background-image: url("fireball.png");
    --sprite-width: 32px;
    --sprite-height: 32px;
    --frames: 1;
}

.sprite.cursor {
    background-image: url("cursor.png");
    --frames: 3;
}

.sprite.cursor-dig {
    background-image: url("cursor-dig.png");
    --sprite-width: 96px;
    --sprite-height: 96px;
    --frames: 3;

    /* THis must be cented...*/
    top: calc(1px * var(--y) * var(--tileHeight) - var(--sprite-height)/2 + 1px * var(--tileHeight)/2);

}

.sprite.man {
    background-image: url("char.png");
    --frames: 4;
    --sprite-width: 32px;
    --sprite-height: 48px;
    animation-direction: normal;
}


/* #region default */


.sprite {
    /*The default width and height of spirites*/
    --sprite-width: 48px;
    --sprite-height: 48px;
    width: var(--sprite-width);
    height: var(--sprite-height);
    top: calc(1px * var(--y) * var(--tileHeight) - var(--sprite-height) + 1px * var(--tileHeight));
    left: calc(1px * var(--x) * var(--tileWidth) - var(--sprite-width) / 2 + 1px * var(--tileWidth) / 2);

    position: absolute;
    animation-name: sprite;
    animation-duration: 0.5s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-timing-function: steps(var(--frames));
    transition: top 1s, left 1s;
    z-index: calc(var(--actor-layer) * var(--v-tiles) * 2 * var(--tileHeight) + var(--y) * 2 + 1);
}

*[debug] .sprite {
    border: 1px solid red;
    margin: -1px;
    box-sizing: content-box;
}

.sprite.right {
    background-position-y: calc(-1 * 100% * 2);
}

.sprite.up {
    background-position-y: calc(-1 * 100% * 3);
}

.sprite.down {
    background-position-y: calc(-1 * 100% * 0);
}

.sprite.left {
    background-position-y: calc(-1 * 100% * 1);
}

.sprite.blue {
    filter: hue-rotate(23deg) saturate(2) brightness(1.4);
}

.sprite.red {
    filter: hue-rotate(186deg) saturate(5.5);
}

.sprite.hide {
    display: none;
}

.sprite.dead {
    opacity: 0.3;
}

@keyframes player-glow {
    0% {
        box-shadow: none;
    }
    50% {
        box-shadow: 0 0 30px 10px rgba(128, 255, 255, 0.7);
    }
    100% {
        box-shadow: none;
    }
 }

.me::before {
    content: "";
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 1px;
    height: 1px;
    border-radius: 50%;
    animation: player-glow ease-in-out 2s infinite;
}

.sprite::after {
    content: var(--name);
    position: absolute;
    font-size: small;
    color: yellow;
    width: 100%;
    text-align: center;
    top: -15px;
}

@keyframes sprite {
    from {
        background-position-x: 0px;
    }

    to {
        background-position-x: calc(-1 * 100% * var(--frames))
    }
}

/*#endregion */
